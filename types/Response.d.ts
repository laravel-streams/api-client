import { AxiosResponse } from 'axios';
import { AnyHeader, HeaderValue, RequestConfig, ResponseHeaders } from './types';
export interface Response<T = any, D = any> {
}
export declare class Response<T = any, D = any> {
    #private;
    set headers(headers: Record<string, any>);
    get headers(): ResponseHeaders;
    get ok(): boolean;
    get redirected(): boolean;
    config: RequestConfig<D>;
    data: T;
    status: number;
    statusText: string;
    request: XMLHttpRequest;
    hasHeader(name: AnyHeader): boolean;
    getHeader(name: AnyHeader): HeaderValue;
    static fromAxiosResponse<T = any, D = any>(axiosResponse: AxiosResponse<T, D>): Response<T, D>;
}
export declare namespace Response {
    const HTTP_CONTINUE = 100;
    const HTTP_SWITCHING_PROTOCOLS = 101;
    const HTTP_PROCESSING = 102;
    const HTTP_EARLY_HINTS = 103;
    const HTTP_OK = 200;
    const HTTP_CREATED = 201;
    const HTTP_ACCEPTED = 202;
    const HTTP_NON_AUTHORITATIVE_INFORMATION = 203;
    const HTTP_NO_CONTENT = 204;
    const HTTP_RESET_CONTENT = 205;
    const HTTP_PARTIAL_CONTENT = 206;
    const HTTP_MULTI_STATUS = 207;
    const HTTP_ALREADY_REPORTED = 208;
    const HTTP_IM_USED = 226;
    const HTTP_MULTIPLE_CHOICES = 300;
    const HTTP_MOVED_PERMANENTLY = 301;
    const HTTP_FOUND = 302;
    const HTTP_SEE_OTHER = 303;
    const HTTP_NOT_MODIFIED = 304;
    const HTTP_USE_PROXY = 305;
    const HTTP_RESERVED = 306;
    const HTTP_TEMPORARY_REDIRECT = 307;
    const HTTP_PERMANENTLY_REDIRECT = 308;
    const HTTP_BAD_REQUEST = 400;
    const HTTP_UNAUTHORIZED = 401;
    const HTTP_PAYMENT_REQUIRED = 402;
    const HTTP_FORBIDDEN = 403;
    const HTTP_NOT_FOUND = 404;
    const HTTP_METHOD_NOT_ALLOWED = 405;
    const HTTP_NOT_ACCEPTABLE = 406;
    const HTTP_PROXY_AUTHENTICATION_REQUIRED = 407;
    const HTTP_REQUEST_TIMEOUT = 408;
    const HTTP_CONFLICT = 409;
    const HTTP_GONE = 410;
    const HTTP_LENGTH_REQUIRED = 411;
    const HTTP_PRECONDITION_FAILED = 412;
    const HTTP_REQUEST_ENTITY_TOO_LARGE = 413;
    const HTTP_REQUEST_URI_TOO_LONG = 414;
    const HTTP_UNSUPPORTED_MEDIA_TYPE = 415;
    const HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
    const HTTP_EXPECTATION_FAILED = 417;
    const HTTP_I_AM_A_TEAPOT = 418;
    const HTTP_MISDIRECTED_REQUEST = 421;
    const HTTP_UNPROCESSABLE_ENTITY = 422;
    const HTTP_LOCKED = 423;
    const HTTP_FAILED_DEPENDENCY = 424;
    const HTTP_TOO_EARLY = 425;
    const HTTP_UPGRADE_REQUIRED = 426;
    const HTTP_PRECONDITION_REQUIRED = 428;
    const HTTP_TOO_MANY_REQUESTS = 429;
    const HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
    const HTTP_UNAVAILABLE_FOR_LEGAL_REASONS = 451;
    const HTTP_INTERNAL_SERVER_ERROR = 500;
    const HTTP_NOT_IMPLEMENTED = 501;
    const HTTP_BAD_GATEWAY = 502;
    const HTTP_SERVICE_UNAVAILABLE = 503;
    const HTTP_GATEWAY_TIMEOUT = 504;
    const HTTP_VERSION_NOT_SUPPORTED = 505;
    const HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = 506;
    const HTTP_INSUFFICIENT_STORAGE = 507;
    const HTTP_LOOP_DETECTED = 508;
    const HTTP_NOT_EXTENDED = 510;
    const HTTP_NETWORK_AUTHENTICATION_REQUIRED = 511;
    const statusTexts: {
        '100': string;
        '101': string;
        '102': string;
        '103': string;
        '200': string;
        '201': string;
        '202': string;
        '203': string;
        '204': string;
        '205': string;
        '206': string;
        '207': string;
        '208': string;
        '226': string;
        '300': string;
        '301': string;
        '302': string;
        '303': string;
        '304': string;
        '305': string;
        '307': string;
        '308': string;
        '400': string;
        '401': string;
        '402': string;
        '403': string;
        '404': string;
        '405': string;
        '406': string;
        '407': string;
        '408': string;
        '409': string;
        '410': string;
        '411': string;
        '412': string;
        '413': string;
        '414': string;
        '415': string;
        '416': string;
        '417': string;
        '418': string;
        '421': string;
        '422': string;
        '423': string;
        '424': string;
        '425': string;
        '426': string;
        '428': string;
        '429': string;
        '431': string;
        '451': string;
        '500': string;
        '501': string;
        '502': string;
        '503': string;
        '504': string;
        '505': string;
        '506': string;
        '507': string;
        '508': string;
        '510': string;
        '511': string;
    };
}
